FUNCTION main():
    WHILE True:
        DISPLAY "Choose an equation to solve:"
        DISPLAY "1. Quadratic (ax^2 + bx + c = 0)"
        DISPLAY "2. Cubic (ax^3 + bx^2 + cx + d = 0)"
        DISPLAY "3. Quartic (ax^4 + bx^3 + cx^2 + dx + e = 0)"
        DISPLAY "4. Exit"

        INPUT choice

        IF choice == "1":
            INPUT a, b, c
            roots = CALL solve_quadratic(a, b, c)
            DISPLAY "Roots:", roots

        ELSE IF choice == "2":
            INPUT a, b, c, d
            roots = CALL solve_cubic(a, b, c, d)
            DISPLAY "Roots:", roots

        ELSE IF choice == "3":
            INPUT a, b, c, d, e
            roots = CALL solve_quartic(a, b, c, d, e)
            DISPLAY "Roots:", roots

        ELSE IF choice == "4":
            BREAK (exit the loop)

        ELSE:
            DISPLAY "Invalid choice. Please try again."

FUNCTION solve_quadratic(a, b, c):
    delta = b^2 - 4 * a * c
    IF delta >= 0:
        x1 = (-b + square_root(delta)) / (2 * a)
        x2 = (-b - square_root(delta)) / (2 * a)
    ELSE:
        x1 = (-b + complex_square_root(delta)) / (2 * a)
        x2 = (-b - complex_square_root(delta)) / (2 * a)
    RETURN x1, x2

FUNCTION solve_cubic(a, b, c, d):
    IF a == 0:
        RETURN CALL solve_quadratic(b, c, d)

    b = b / a
    c = c / a
    d = d / a

    q = (3 * c - b^2) / 9
    r = (9 * b * c - 27 * d - 2 * b^3) / 54
    delta = q^3 + r^2

    IF delta > 0:
        s = (r + square_root(delta))^(1/3)
        t = (r - square_root(delta))^(1/3)
        x1 = s + t - b / 3
        RETURN x1

    ELSE IF delta == 0:
        s = r^(1/3)
        x1 = 2 * s - b / 3
        x2 = -s - b / 3
        RETURN x1, x2, x2

    ELSE:
        theta = complex_arccos(r / complex_square_root(-q^3))
        x1 = 2 * complex_square_root(-q) * complex_cos(theta / 3) - b / 3
        x2 = 2 * complex_square_root(-q) * complex_cos((theta + 2 * pi) / 3) - b / 3
        x3 = 2 * complex_square_root(-q) * complex_cos((theta + 4 * pi) / 3) - b / 3
        RETURN x1, x2, x3

FUNCTION solve_quartic(a, b, c, d, e):
    IF a == 0:
        RETURN CALL solve_cubic(b, c, d, e)

    b = b / a
    c = c / a
    d = d / a
    e = e / a

    p = c - 3 * b^2 / 8
    q = d - b * c / 2 + b^3 / 8
    r = e - b * d / 4 + b^2 * c / 16 - 3 * b^4 / 256

    IF p == q == 0:
        y = -b / 4
        z = complex_square_root(-r)
        RETURN y + z, y - z, y + z, y - z

    u = (q^2) / 4 + (p^3) / 27

    IF u > 0:
        w = (complex_square_root(u) + absolute_value(q / 2))^(1/3)
        IF q > 0:
            w = -w
        y = w + (p / (3 * w)) - b / 4
    ELSE:
        w = complex_arccos(-q / (2 * complex_square_root(-(p^3) / 27)))
        y = 2 * complex_square_root(-p / 3) * complex_cos(w / 3) - b / 4

    m = complex_square_root(y^2 - 4 * r)

    z1 = complex_square_root(y + m)
    z2 = complex_square_root(y - m)

    x1 = (z1 + complex_square_root(-p - z1^2 + q / z1)) / 2
    x2 = (z1 - complex_square_root(-p - z1^2 + q / z1)) / 2
    x3 = (z2 + complex_square_root(-p - z2^2 - q / z2)) / 2
    x4 = (z2 - complex_square_root(-p - z2^2 - q / z2)) / 2
    RETURN x1, x2, x3, x4